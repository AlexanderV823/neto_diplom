
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

    Перем ДатаРабот; //Хранит дату работ из ранее записанной версии документа
    Перем ВремяНачала; //Хранит время начала работ из ранее записанной версии документа 
    Перем ВремяОкончания; //Хранит время окончания работ из ранее записанной версии документа
    Перем НазначенныйСпециалист; //Хранит назначенного специалиста из ранее записанной версии документа
    Перем НовыйДокумент; //Истина -новый документ, ложь - повторно записываемый

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    
    Если ОбменДанными.Загрузка Тогда
        
        Возврат;
    
    КонецЕсли;
    
    Если Не ЭтоНовый() Тогда
        
        Запрос = Новый Запрос;
        Запрос.Текст =
            "ВЫБРАТЬ
            |    ВКМ_ОбслуживаниеКлиента.Специалист КАК Специалист,
            |    ВКМ_ОбслуживаниеКлиента.ДатаПроведенияРабот КАК ДатаПроведенияРабот,
            |    ВКМ_ОбслуживаниеКлиента.ВремяНачалаРабот КАК ВремяНачалаРабот,
            |    ВКМ_ОбслуживаниеКлиента.ВремяОкончанияРабот КАК ВремяОкончанияРабот
            |ИЗ
            |    Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
            |ГДЕ
            |    ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка";
        
        Запрос.УстановитьПараметр("Ссылка", Ссылка);
        
        РезультатЗапроса = Запрос.Выполнить();
        
        Выборка = РезультатЗапроса.Выбрать();
        
        Если Выборка.Следующий() Тогда
            
            ДатаРабот = Выборка.ДатаПроведенияРабот;
            ВремяНачала = Выборка.ВремяНачалаРабот;
            ВремяОкончания = Выборка.ВремяОкончанияРабот;
            НазначенныйСпециалист = Выборка.Специалист;
            НовыйДокумент = Ложь;
            
        КонецЕсли;
        
    Иначе
        
        НовыйДокумент = Истина;
           
    КонецЕсли;
        
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
    
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ
        |    ВКМ_ОбслуживаниеКлиента.Договор.ВКМ_СтоимостьЧасаРаботы КАК СтоимостьЧасаРаботы
        |ИЗ
        |    Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
        |ГДЕ
        |    ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка
        |    И ВКМ_ОбслуживаниеКлиента.Договор.ВидДоговора = &ВидДоговора
        |    И ВКМ_ОбслуживаниеКлиента.Договор.ВКМ_НачалоДействияДоговора <= &ДатаДокумента
        |    И ВКМ_ОбслуживаниеКлиента.Договор.ВКМ_ОкончаниеДействияДоговора >= &ДатаДокумента";
    
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
    Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбоненскоеОбслуживание);
    Запрос.УстановитьПараметр("ДатаДокумента", Дата);
        
    Если Запрос.Выполнить().Пустой() Тогда
        
        ТекстСообщения = НСтр("ru = 'Проверьте правильность выбора договора:
                                    |Должен быть выбран договор с типом Абонентское обслуживание.
                                    |Дата документа должна быть в пределах срока действия договора.'");
       
        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Договор", "Объект", Отказ);
        
        Возврат;
        
    Иначе
   
        СтоимостьЧасаРаботы = Запрос.Выполнить().Выгрузить()[0].СтоимостьЧасаРаботы;
        
        //Поскольку группировать в запросе нечего, просто обходим ТЧ в цикле.
        //Из запроса, если он что-то выдал, берем стоимость часа работы.
        //Если запрос пустой, то до обработки движения выполнение программы не дойдет.
        
        // регистр ВКМ_ВыполненныеКлиентуРаботы
        Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
        
        Для Каждого ТекСтрокаВыполненныеРаботы из ВыполненныеРаботы Цикл 
            
            Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
            Движение.Период = Дата;
            Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
            Движение.Клиент = Клиент;
            Движение.Договор = Договор;
            Движение.КоличествоЧасов = ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту;
            Движение.СуммаКОплате = СтоимостьЧасаРаботы * ТекСтрокаВыполненныеРаботы.ЧасыКОплатеКлиенту;
        
        КонецЦикла;
                                           
    КонецЕсли;
   
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
    
    Если ОбменДанными.Загрузка Тогда
        
        Возврат;
    
    КонецЕсли;    
    
    Если НовыйДокумент Тогда
        
        ТекстСообщения = НСтр("ru = 'Создан новый документ %1:
                                    |Дата работ: %2
                                    |Время начала работ: %3
                                    |Время окончания работ %4
                                    |Исполнитель: %5'");
       
        ТекстСообщенияВТелеграм = СтрШаблон(ТекстСообщения,
                                            Ссылка, 
                                            Формат(ДатаПроведенияРабот, "ДЛФ=DD;"), 
                                            Формат(ВремяНачалаРабот, "ДЛФ=DT;"), 
                                            Формат(ВремяОкончанияРабот, "ДЛФ=DDT;"),
                                            Специалист);
        
        НовыйЭлемент = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
        НовыйЭлемент.ТекстСообщения = ТекстСообщенияВТелеграм;
        НовыйЭлемент.Записать();
        
    Иначе  
   
        Если ДатаРабот <> ДатаПроведенияРабот Тогда
                
            ТекстСообщения = НСтр("ru = 'В документе: %1 изменена дата проведения работ.
                                        |Новая дата: %2'");
               
            ТекстСообщенияВТелеграм = СтрШаблон(ТекстСообщения, Ссылка, ДатаПроведенияРабот);
                
            НовыйЭлемент = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
            НовыйЭлемент.ТекстСообщения = ТекстСообщенияВТелеграм;
            НовыйЭлемент.Записать(); 
                    
        КонецЕсли;
            
        Если ВремяНачала <> ВремяНачалаРабот Или ВремяОкончания <> ВремяОкончанияРабот Тогда
                
            ТекстСообщения = НСтр("ru = 'В документе: %1 изменено время проведения работ.
                                        |Новое время с %2 по %3'");
               
            ТекстСообщенияВТелеграм = СтрШаблон(ТекстСообщения,
                                                Ссылка,
                                                Формат(ВремяНачалаРабот, "ДЛФ=DT;"),
                                                Формат(ВремяОкончанияРабот, "ДЛФ=DDT;"));
                
            НовыйЭлемент = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
            НовыйЭлемент.ТекстСообщения = ТекстСообщенияВТелеграм;
            НовыйЭлемент.Записать(); 
                    
        КонецЕсли;
            
        Если НазначенныйСпециалист <> Специалист Тогда
            
            ТекстСообщения = НСтр("ru = 'В документе: %1 изменен специалист.
                                        |Новый ответственный: %2'");
           
            ТекстСообщенияВТелеграм = СтрШаблон(ТекстСообщения,
                                                Ссылка,
                                                Специалист);
            
            НовыйЭлемент = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
            НовыйЭлемент.ТекстСообщения = ТекстСообщенияВТелеграм;
            НовыйЭлемент.Записать(); 
                
        КонецЕсли;
    
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли