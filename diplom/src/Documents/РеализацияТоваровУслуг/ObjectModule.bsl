
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Организация КАК Организация,
	               |	ЗаказПокупателя.Контрагент КАК Контрагент,
	               |	ЗаказПокупателя.Договор КАК Договор,
	               |	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	               |	ЗаказПокупателя.Товары.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Товары,
	               |	ЗаказПокупателя.Услуги.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Услуги
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	ТоварыОснования = Выборка.Товары.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ТоварыОснования);
	КонецЦикла;
	
	УслугиОснования = Выборка.Услуги.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Услуги.Добавить(), УслугиОснования);
	КонецЦикла;
	
	Основание = ДанныеЗаполнения;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	Движения.ОбработкаЗаказов.Записывать = Истина;
	Движения.ОстаткиТоваров.Записывать = Истина;
	
	Движение = Движения.ОбработкаЗаказов.Добавить();
	Движение.Период = Дата;
	Движение.Контрагент = Контрагент;
	Движение.Договор = Договор;
	Движение.Заказ = Основание;
	Движение.СуммаОтгрузки = СуммаДокумента;

	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.ОстаткиТоваров.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Сумма = ТекСтрокаТовары.Сумма;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;

КонецПроцедуры

Процедура ВКМ_ВыполнитьАвтозаполнение() Экспорт

// Начало Володин А.А. 
// Дипломная работа
// 20 февраля 2025 г.

    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ
        |    ВЫБОР
        |        КОГДА ВКМ_НоменклатураРаботыСпециалиста.Значение.Ссылка ЕСТЬ НЕ NULL
        |            ТОГДА ВКМ_НоменклатураРаботыСпециалиста.Значение
        |        ИНАЧЕ 0
        |    КОНЕЦ КАК НоменклатураАбонентскаяПлата,
        |    ВЫБОР
        |        КОГДА ВКМ_НоменклатураАбонентскаяПлата.Значение.Ссылка ЕСТЬ НЕ NULL
        |            ТОГДА ВКМ_НоменклатураАбонентскаяПлата.Значение
        |        ИНАЧЕ 0
        |    КОНЕЦ КАК НоменклатураРаботыСпециалиста,
        |    ЕСТЬNULL(ДоговорыКонтрагентов.ВКМ_СуммаАбонентскойПлаты, 0) КАК СуммаАбонентскойПлаты,
        |    СУММА(ВКМ_ВыполненныеКлиентуРаботыОбороты.КоличествоЧасовПриход) КАК КоличествоЧасов,
        |    СУММА(ВКМ_ВыполненныеКлиентуРаботыОбороты.СуммаКОплатеПриход) КАК СуммаКОплате
        |ИЗ
        |    Константа.ВКМ_НоменклатураАбонентскаяПлата КАК ВКМ_НоменклатураАбонентскаяПлата,
        |    Константа.ВКМ_НоменклатураРаботыСпециалиста КАК ВКМ_НоменклатураРаботыСпециалиста,
        |    РегистрНакопления.ВКМ_ВыполненныеКлиентуРаботы.Обороты(&ПериодНачало, &ПериодКонец,, Клиент = &Клиент
        |    И Договор = &Договор) КАК ВКМ_ВыполненныеКлиентуРаботыОбороты,
        |    Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
        |ГДЕ
        |    ДоговорыКонтрагентов.Ссылка = &Договор
        |СГРУППИРОВАТЬ ПО
        |    ВЫБОР
        |        КОГДА ВКМ_НоменклатураРаботыСпециалиста.Значение.Ссылка ЕСТЬ НЕ NULL
        |            ТОГДА ВКМ_НоменклатураРаботыСпециалиста.Значение
        |        ИНАЧЕ 0
        |    КОНЕЦ,
        |    ВЫБОР
        |        КОГДА ВКМ_НоменклатураАбонентскаяПлата.Значение.Ссылка ЕСТЬ НЕ NULL
        |            ТОГДА ВКМ_НоменклатураАбонентскаяПлата.Значение
        |        ИНАЧЕ 0
        |    КОНЕЦ,
        |    ЕСТЬNULL(ДоговорыКонтрагентов.ВКМ_СуммаАбонентскойПлаты, 0)";
    
    Запрос.УстановитьПараметр("ПериодНачало", НачалоМесяца(Дата));
    Запрос.УстановитьПараметр("ПериодКонец", КонецМесяца(Дата));
    Запрос.УстановитьПараметр("Клиент", Контрагент);
    Запрос.УстановитьПараметр("Договор", Договор);
    
    Если Запрос.Выполнить().Пустой() Тогда
        
        Сообщить("Запрос пустой( Нужно переделать!");
        
        Возврат;
        
    КонецЕсли;
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Выборка = РезультатЗапроса.Выбрать();
    
    Пока Выборка.Следующий() Цикл
            
        НоменклатураАбонентскаяПлата = Выборка.НоменклатураАбонентскаяПлата;
        НоменклатураРаботыСпециалиста = Выборка.НоменклатураРаботыСпециалиста;
        СуммаАбонентскойПлаты = Выборка.СуммаАбонентскойПлаты;
        КоличествоЧасов = Выборка.КоличествоЧасов;
        СуммаКОплате = Выборка.СуммаКОплате;
                        
    КонецЦикла;
        
    Если НоменклатураАбонентскаяПлата = Тип("Число") Или НоменклатураРаботыСпециалиста = Тип("Число") Тогда
            
        ТекстСообщения = НСтр("ru = 'Проверьте заполнение значений констант ""Номенклатура абонентская плата"" и ""Номенклатура работы специалиста"".
                                    |Обе константы должны быть заполнены!'");
            
        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , );
            
        Возврат;
            
    КонецЕсли;
        
    //Выполним условие "Если в договоре ненулевая сумма абонентской платы, добавьте..."
    //Выполним условие "Если ... есть информация о выполненных работах по этому договору"
    Если СуммаАбонентскойПлаты > 0 И КоличествоЧасов > 0 Тогда 
            
        Услуги.Очистить();
                
        СтрокаУслуги = Услуги.Добавить();
        СтрокаУслуги.Номенклатура = НоменклатураРаботыСпециалиста;
        СтрокаУслуги.Количество = КоличествоЧасов;
        СтрокаУслуги.Сумма = СуммаКОплате;
                
        СтрокаУслуги = Услуги.Добавить();
        СтрокаУслуги.Номенклатура = НоменклатураАбонентскаяПлата;
        СтрокаУслуги.Цена = СуммаАбонентскойПлаты;
         
    ИначеЕсли СуммаАбонентскойПлаты = 0 Тогда 
                      
        ТекстСообщения = НСтр("ru = 'В договоре не указана сумма абонентской платы.'");
            
        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , );
        
    ИначеЕсли КоличествоЧасов = 0 Тогда
        
        ТекстСообщения = НСтр("ru = 'В текущем месяце не было работ по договору.'");
            
        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , );
            
    КонецЕсли;

// Конец 20 февраля 2025 г. 
   
КонецПроцедуры

#КонецОбласти

#КонецЕсли
